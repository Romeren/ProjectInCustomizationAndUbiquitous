/*
 * generated by Xtext 2.9.2
 */
grammar InternalVizualizer;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.sdu.iotvizualizerlanguage.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.sdu.iotvizualizerlanguage.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.sdu.iotvizualizerlanguage.services.VizualizerGrammarAccess;

}
@parser::members {
	private VizualizerGrammarAccess grammarAccess;

	public void setGrammarAccess(VizualizerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSystem
entryRuleSystem
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemAccess().getGroup()); }
		(rule__System__Group__0)
		{ after(grammarAccess.getSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePage
entryRulePage
:
{ before(grammarAccess.getPageRule()); }
	 rulePage
{ after(grammarAccess.getPageRule()); } 
	 EOF 
;

// Rule Page
rulePage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPageAccess().getGroup()); }
		(rule__Page__Group__0)
		{ after(grammarAccess.getPageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTile
entryRuleTile
:
{ before(grammarAccess.getTileRule()); }
	 ruleTile
{ after(grammarAccess.getTileRule()); } 
	 EOF 
;

// Rule Tile
ruleTile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTileAccess().getAlternatives()); }
		(rule__Tile__Alternatives)
		{ after(grammarAccess.getTileAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLink
entryRuleLink
:
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinkAccess().getGroup()); }
		(rule__Link__Group__0)
		{ after(grammarAccess.getLinkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGraph
entryRuleGraph
:
{ before(grammarAccess.getGraphRule()); }
	 ruleGraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule Graph
ruleGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGraphAccess().getGroup()); }
		(rule__Graph__Group__0)
		{ after(grammarAccess.getGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleApi
entryRuleApi
:
{ before(grammarAccess.getApiRule()); }
	 ruleApi
{ after(grammarAccess.getApiRule()); } 
	 EOF 
;

// Rule Api
ruleApi 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getApiAccess().getGroup()); }
		(rule__Api__Group__0)
		{ after(grammarAccess.getApiAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOp1
entryRuleOp1
:
{ before(grammarAccess.getOp1Rule()); }
	 ruleOp1
{ after(grammarAccess.getOp1Rule()); } 
	 EOF 
;

// Rule Op1
ruleOp1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOp1Access().getAlternatives()); }
		(rule__Op1__Alternatives)
		{ after(grammarAccess.getOp1Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getGroup()); }
		(rule__Factor__Group__0)
		{ after(grammarAccess.getFactorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOp2
entryRuleOp2
:
{ before(grammarAccess.getOp2Rule()); }
	 ruleOp2
{ after(grammarAccess.getOp2Rule()); } 
	 EOF 
;

// Rule Op2
ruleOp2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOp2Access().getAlternatives()); }
		(rule__Op2__Alternatives)
		{ after(grammarAccess.getOp2Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitive
entryRulePrimitive
:
{ before(grammarAccess.getPrimitiveRule()); }
	 rulePrimitive
{ after(grammarAccess.getPrimitiveRule()); } 
	 EOF 
;

// Rule Primitive
rulePrimitive 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveAccess().getAlternatives()); }
		(rule__Primitive__Alternatives)
		{ after(grammarAccess.getPrimitiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getValAssignment()); }
		(rule__Number__ValAssignment)
		{ after(grammarAccess.getNumberAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormula
entryRuleFormula
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaAccess().getGroup()); }
		(rule__Formula__Group__0)
		{ after(grammarAccess.getFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tile__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTileAccess().getLinkParserRuleCall_0()); }
		ruleLink
		{ after(grammarAccess.getTileAccess().getLinkParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTileAccess().getGraphParserRuleCall_1()); }
		ruleGraph
		{ after(grammarAccess.getTileAccess().getGraphParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Op1__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOp1Access().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getOp1Access().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOp1Access().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getOp1Access().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Op2__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOp2Access().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getOp2Access().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOp2Access().getSolidusKeyword_1()); }
		'/'
		{ after(grammarAccess.getOp2Access().getSolidusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveAccess().getNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getPrimitiveAccess().getNumberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getVariableParserRuleCall_1()); }
		ruleVariable
		{ after(grammarAccess.getPrimitiveAccess().getVariableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getGroup_2()); }
		(rule__Primitive__Group_2__0)
		{ after(grammarAccess.getPrimitiveAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getPagesAssignment_0()); }
	(rule__System__PagesAssignment_0)*
	{ after(grammarAccess.getSystemAccess().getPagesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__System__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemAccess().getApisAssignment_1()); }
	(rule__System__ApisAssignment_1)*
	{ after(grammarAccess.getSystemAccess().getApisAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Page__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Page__Group__0__Impl
	rule__Page__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPageAccess().getPageKeyword_0()); }
	'Page'
	{ after(grammarAccess.getPageAccess().getPageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Page__Group__1__Impl
	rule__Page__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPageAccess().getNameAssignment_1()); }
	(rule__Page__NameAssignment_1)
	{ after(grammarAccess.getPageAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Page__Group__2__Impl
	rule__Page__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPageAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getPageAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Page__Group__3__Impl
	rule__Page__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPageAccess().getTilesAssignment_3()); }
	(rule__Page__TilesAssignment_3)*
	{ after(grammarAccess.getPageAccess().getTilesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Page__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPageAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getPageAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__0__Impl
	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkKeyword_0()); }
	'Link'
	{ after(grammarAccess.getLinkAccess().getLinkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__1__Impl
	rule__Link__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getNameAssignment_1()); }
	(rule__Link__NameAssignment_1)
	{ after(grammarAccess.getLinkAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__2__Impl
	rule__Link__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getLinkAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getPageAssignment_3()); }
	(rule__Link__PageAssignment_3)
	{ after(grammarAccess.getLinkAccess().getPageAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
	'Graph'
	{ after(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Graph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGraphAccess().getNameAssignment_1()); }
	(rule__Graph__NameAssignment_1)
	{ after(grammarAccess.getGraphAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Api__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Api__Group__0__Impl
	rule__Api__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Api__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApiAccess().getApiKeyword_0()); }
	'Api'
	{ after(grammarAccess.getApiAccess().getApiKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Api__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Api__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Api__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getApiAccess().getNameAssignment_1()); }
	(rule__Api__NameAssignment_1)
	{ after(grammarAccess.getApiAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
	(rule__Expression__LeftAssignment_0)
	{ after(grammarAccess.getExpressionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)?
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOpAssignment_1_0()); }
	(rule__Expression__OpAssignment_1_0)
	{ after(grammarAccess.getExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
	(rule__Expression__RightAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getLeftAssignment_0()); }
	(rule__Factor__LeftAssignment_0)
	{ after(grammarAccess.getFactorAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getGroup_1()); }
	(rule__Factor__Group_1__0)?
	{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getOpAssignment_1_0()); }
	(rule__Factor__OpAssignment_1_0)
	{ after(grammarAccess.getFactorAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightAssignment_1_1()); }
	(rule__Factor__RightAssignment_1_1)
	{ after(grammarAccess.getFactorAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primitive__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primitive__Group_2__0__Impl
	rule__Primitive__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimitiveAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primitive__Group_2__1__Impl
	rule__Primitive__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveAccess().getExpressionParserRuleCall_2_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimitiveAccess().getExpressionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primitive__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimitiveAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__0__Impl
	rule__Formula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getNameAssignment_0()); }
	(rule__Formula__NameAssignment_0)
	{ after(grammarAccess.getFormulaAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__1__Impl
	rule__Formula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFormulaAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__2__Impl
	rule__Formula__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getGroup_2()); }
	(rule__Formula__Group_2__0)?
	{ after(grammarAccess.getFormulaAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__3__Impl
	rule__Formula__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFormulaAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__4__Impl
	rule__Formula__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getFormulaAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getExpAssignment_5()); }
	(rule__Formula__ExpAssignment_5)
	{ after(grammarAccess.getFormulaAccess().getExpAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_2__0__Impl
	rule__Formula__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getVarsAssignment_2_0()); }
	(rule__Formula__VarsAssignment_2_0)
	{ after(grammarAccess.getFormulaAccess().getVarsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getGroup_2_1()); }
	(rule__Formula__Group_2_1__0)*
	{ after(grammarAccess.getFormulaAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Formula__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_2_1__0__Impl
	rule__Formula__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getFormulaAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formula__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaAccess().getVarsAssignment_2_1_1()); }
	(rule__Formula__VarsAssignment_2_1_1)
	{ after(grammarAccess.getFormulaAccess().getVarsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__System__PagesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getPagesPageParserRuleCall_0_0()); }
		rulePage
		{ after(grammarAccess.getSystemAccess().getPagesPageParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__System__ApisAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSystemAccess().getApisApiParserRuleCall_1_0()); }
		ruleApi
		{ after(grammarAccess.getSystemAccess().getApisApiParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPageAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPageAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Page__TilesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPageAccess().getTilesTileParserRuleCall_3_0()); }
		ruleTile
		{ after(grammarAccess.getPageAccess().getTilesTileParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__PageAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getPagePageCrossReference_3_0()); }
		(
			{ before(grammarAccess.getLinkAccess().getPagePageIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getLinkAccess().getPagePageIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getLinkAccess().getPagePageCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Api__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getApiAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getApiAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getLeftFactorParserRuleCall_0_0()); }
		ruleFactor
		{ after(grammarAccess.getExpressionAccess().getLeftFactorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOpOp1ParserRuleCall_1_0_0()); }
		ruleOp1
		{ after(grammarAccess.getExpressionAccess().getOpOp1ParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getLeftPrimitiveParserRuleCall_0_0()); }
		rulePrimitive
		{ after(grammarAccess.getFactorAccess().getLeftPrimitiveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getOpOp2ParserRuleCall_1_0_0()); }
		ruleOp2
		{ after(grammarAccess.getFactorAccess().getOpOp2ParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getRightFactorParserRuleCall_1_1_0()); }
		ruleFactor
		{ after(grammarAccess.getFactorAccess().getRightFactorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFormulaAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__VarsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaAccess().getVarsVariableParserRuleCall_2_0_0()); }
		ruleVariable
		{ after(grammarAccess.getFormulaAccess().getVarsVariableParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__VarsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaAccess().getVarsVariableParserRuleCall_2_1_1_0()); }
		ruleVariable
		{ after(grammarAccess.getFormulaAccess().getVarsVariableParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formula__ExpAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaAccess().getExpExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getFormulaAccess().getExpExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
