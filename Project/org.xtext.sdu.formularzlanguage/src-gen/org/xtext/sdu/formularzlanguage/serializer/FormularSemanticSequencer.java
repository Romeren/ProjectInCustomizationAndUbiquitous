/*
 * generated by Xtext 2.9.2
 */
package org.xtext.sdu.formularzlanguage.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.sdu.formularzlanguage.formular.Expression;
import org.xtext.sdu.formularzlanguage.formular.Factor;
import org.xtext.sdu.formularzlanguage.formular.Formula;
import org.xtext.sdu.formularzlanguage.formular.FormularPackage;
import org.xtext.sdu.formularzlanguage.formular.Variable;
import org.xtext.sdu.formularzlanguage.services.FormularGrammarAccess;

@SuppressWarnings("all")
public class FormularSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FormularGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FormularPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FormularPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case FormularPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case FormularPackage.FORMULA:
				sequence_Formula(context, (Formula) semanticObject); 
				return; 
			case FormularPackage.NUMBER:
				sequence_Number(context, (org.xtext.sdu.formularzlanguage.formular.Number) semanticObject); 
				return; 
			case FormularPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *     Primitive returns Expression
	 *
	 * Constraint:
	 *     (left=Factor (op=Op1 right=Expression)?)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Factor returns Factor
	 *
	 * Constraint:
	 *     (left=Primitive (op=Op2 right=Factor)?)
	 */
	protected void sequence_Factor(ISerializationContext context, Factor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Formula returns Formula
	 *
	 * Constraint:
	 *     (name=ID (vars+=Variable vars+=Variable*)? exp=Expression)
	 */
	protected void sequence_Formula(ISerializationContext context, Formula semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Primitive returns Number
	 *     Number returns Number
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_Number(ISerializationContext context, org.xtext.sdu.formularzlanguage.formular.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormularPackage.Literals.NUMBER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormularPackage.Literals.NUMBER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primitive returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormularPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormularPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
