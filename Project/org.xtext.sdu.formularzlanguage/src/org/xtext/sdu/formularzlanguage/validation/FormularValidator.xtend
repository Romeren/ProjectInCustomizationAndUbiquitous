/*
 * generated by Xtext 2.9.2
 */
package org.xtext.sdu.formularzlanguage.validation

import java.util.ArrayList
import java.util.List
import org.eclipse.xtext.validation.Check
import org.xtext.sdu.formularzlanguage.formular.Expression
import org.xtext.sdu.formularzlanguage.formular.Factor
import org.xtext.sdu.formularzlanguage.formular.Formula
import org.xtext.sdu.formularzlanguage.formular.Variable

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FormularValidator extends AbstractFormularValidator {
	
	@Check
	def checkVariableIsLeftSide(Formula formula) {
		var expressionVariables = formula.exp.fetchVariableNames()
		for (namedVar : expressionVariables) {
			if (!formula.vars.map[item | item.name].contains(namedVar.name)) {
				error('Found Variable: "' + namedVar.name + '" in' +
					' expression not defined on left side of formula',
					namedVar, namedVar.eClass.getEStructuralFeature(0))
			}
		}
	}
	
	def List<Variable> fetchVariableNames(Expression expression) {
		var set = expression.left.fetchVariableNames();
		if(expression.right != null) {
			set.addAll(expression.right.fetchVariableNames())			
		}
		
		return set
	}
	
	def List<Variable> fetchVariableNames(Factor factor) {
		var list = new ArrayList<Variable>()
		if (factor.left instanceof Variable) {
			val variable = factor.left as Variable
			list.add(variable)
		}
		if(factor.right != null) {
			list.addAll(factor.right.fetchVariableNames())
		}
		
		return list
	}
	
	
}
