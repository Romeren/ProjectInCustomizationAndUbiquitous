/**
 * generated by Xtext 2.9.2
 */
package org.xtext.sdu.iotvizualizerlanguage.generator;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.List;
import java.util.OptionalInt;
import java.util.Random;
import java.util.stream.IntStream;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.sdu.iotvizualizerlanguage.generator.ApiGenerator;
import org.xtext.sdu.iotvizualizerlanguage.generator.Postcompile;
import org.xtext.sdu.iotvizualizerlanguage.generator.Precompile;
import org.xtext.sdu.iotvizualizerlanguage.generator.TileColor;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Graph;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Link;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Page;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Tile;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class VizualizerGenerator extends AbstractGenerator {
  @Inject
  private Precompile precompile;
  
  @Inject
  private Postcompile postcompile;
  
  @Inject
  private TileColor colorClass;
  
  @Inject
  private Random random;
  
  @Inject
  private ApiGenerator apigen;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.precompile.precompile(resource, fsa);
    this.apigen.doGenerate(resource, fsa, context);
    List<String> pageNames = CollectionLiterals.<String>newArrayList();
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Page> _filter = Iterables.<Page>filter(_iterable, Page.class);
    for (final Page p : _filter) {
      {
        String _name = p.getName();
        pageNames.add(_name);
        String _name_1 = p.getName();
        String _plus = ("templates\\" + _name_1);
        String _plus_1 = (_plus + ".html");
        CharSequence _compileTemplateHTML = this.compileTemplateHTML(p);
        fsa.generateFile(_plus_1, _compileTemplateHTML);
      }
    }
    this.postcompile.postcompile(fsa, pageNames);
  }
  
  public CharSequence compileTemplateHTML(final Page p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{% extends \'base.html\' %}");
    _builder.newLine();
    _builder.append("{% block content %}");
    _builder.newLine();
    _builder.append("<div class=\"tile-area fg-white tile-area-scheme-dark\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<h1 class=\"tile-area-title\">");
    String _name = p.getName();
    _builder.append(_name, "\t");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<div class=\"tile-area-controls\">");
    _builder.newLine();
    {
      EList<Tile> _tiles = p.getTiles();
      for(final Tile l : _tiles) {
        {
          if ((l instanceof Link)) {
            _builder.append("\t\t");
            IntStream _ints = this.random.ints(0, 39);
            OptionalInt _findFirst = _ints.findFirst();
            int _asInt = _findFirst.getAsInt();
            CharSequence _color = this.colorClass.getColor(_asInt);
            CharSequence _compileControlButton = this.compileControlButton(((Link)l), _color);
            _builder.append(_compileControlButton, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div class=\"tile-group\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<span class=\"tile-group-title\">General</span>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<div class=\"tile-container\">");
    _builder.newLine();
    {
      EList<Tile> _tiles_1 = p.getTiles();
      for(final Tile t : _tiles_1) {
        _builder.append("\t\t\t");
        IntStream _ints_1 = this.random.ints(0, 39);
        OptionalInt _findFirst_1 = _ints_1.findFirst();
        int _asInt_1 = _findFirst_1.getAsInt();
        CharSequence _color_1 = this.colorClass.getColor(_asInt_1);
        CharSequence _compile = this.compile(t, _color_1);
        _builder.append(_compile, "\t\t\t");
        _builder.append("\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("{% endblock %}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlButton(final Link link, final CharSequence colorClass) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<a class=\"image-button ");
    _builder.append(colorClass, "");
    _builder.append(" fg-white bg-hover-dark no-border\" href=\'/");
    Page _page = link.getPage();
    String _name = _page.getName();
    _builder.append(_name, "");
    _builder.append("/\'>");
    String _name_1 = link.getName();
    _builder.append(_name_1, "");
    _builder.append("</a>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final Link link, final CharSequence colorClass) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div class=\"tile-small ");
    _builder.append(colorClass, "");
    _builder.append(" fg-white\" onclick=\"document.location.href=\'/");
    Page _page = link.getPage();
    String _name = _page.getName();
    _builder.append(_name, "");
    _builder.append("/\'\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<div class=\"tile-content\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<span>");
    String _name_1 = link.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("<span>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Graph graph, final CharSequence colorClass) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div class=\"tile-large ");
    _builder.append(colorClass, "");
    _builder.append(" fg-white\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<div class=\"tile-content chart\" id=\"");
    String _name = graph.getName();
    _builder.append(_name, "\t");
    _builder.append("\" data-graph-content=\"{{graph_data}}\" onclick=\"repaint");
    String _name_1 = graph.getName();
    _builder.append(_name_1, "\t");
    _builder.append("()\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<span class=\"tile-label\">");
    String _name_2 = graph.getName();
    _builder.append(_name_2, "\t");
    _builder.append("<span>");
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("function paint");
    String _name_3 = graph.getName();
    _builder.append(_name_3, "\t\t\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("console.log(\"chart script start\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var width = $(\"#");
    String _name_4 = graph.getName();
    _builder.append(_name_4, "\t\t\t");
    _builder.append("\").parent().width();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("var height = $(\"#");
    String _name_5 = graph.getName();
    _builder.append(_name_5, "\t\t\t");
    _builder.append("\").parent().height();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("var margin = {top: (height/100)*10, right: (width/100)*5, bottom: (height/100)*10, left: (width/100)*15};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("width +=- margin.left - margin.right;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("height += - margin.top - margin.bottom;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var parseDate = d3.time.format(\"%d-%b-%y\").parse;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var x = d3.time.scale()");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".range([0, width]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var y = d3.scale.linear()");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".range([height, 0]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var xAxis = d3.svg.axis()");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".scale(x)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".orient(\"bottom\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var yAxis = d3.svg.axis()");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".scale(y)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".orient(\"left\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var area = d3.svg.area()");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".x(function(d) { return x(d.date); })");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".y0(height)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".y1(function(d) { return y(d.close); });");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var svg = d3.select(\"#");
    String _name_6 = graph.getName();
    _builder.append(_name_6, "\t\t\t");
    _builder.append("\").append(\"svg\")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"width\", width + margin.left + margin.right)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"height\", height + margin.top + margin.bottom)");
    _builder.newLine();
    _builder.append("\t\t\t  ");
    _builder.append(".append(\"g\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("csv = $(\"#");
    String _name_7 = graph.getName();
    _builder.append(_name_7, "\t\t\t");
    _builder.append("\").data().graphContent.split(\"\'\").join(\"\").split(\", \").join(\"\\n\").replace(\'[\', \'\').replace(\']\',\'\').split(\"\\\\n\").join(\"\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//parse csv");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("var lines=csv.split(\"\\n\");");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("var result = [];");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("var headers=lines[0].split(\",\");");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("for(var i=1;i<lines.length;i++){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t  \t\t\t");
    _builder.append("var obj = {};");
    _builder.newLine();
    _builder.append("\t  \t\t\t");
    _builder.append("var currentline=lines[i].split(\",\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t  \t\t\t");
    _builder.append("for(var j=0;j<headers.length;j++){");
    _builder.newLine();
    _builder.append("\t\t  \t\t\t");
    _builder.append("obj[headers[j]] = currentline[j];");
    _builder.newLine();
    _builder.append("\t  \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t  \t\t\t");
    _builder.append("result.push(obj);");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("data = result;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("data.forEach(function(d) {");
    _builder.newLine();
    _builder.append("\t\t\t  ");
    _builder.append("d.date = parseDate(d.date);");
    _builder.newLine();
    _builder.append("\t\t\t  ");
    _builder.append("d.close = +d.close;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("x.domain(d3.extent(data, function(d) { return d.date; }));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("y.domain([0, d3.max(data, function(d) { return d.close; })]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("svg.append(\"path\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".datum(data)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"class\", \"area\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"d\", area);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("svg.append(\"g\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"class\", \"x axis\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"transform\", \"translate(0,\" + height + \")\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".call(xAxis);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("svg.append(\"g\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"class\", \"y axis\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".call(yAxis)");
    _builder.newLine();
    _builder.append("\t\t\t  ");
    _builder.append(".append(\"text\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"transform\", \"rotate(-90)\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"y\", 6)");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".attr(\"dy\", \".71em\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".style(\"text-anchor\", \"end\")");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append(".text(\"Price ($)\");\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("function repaint");
    String _name_8 = graph.getName();
    _builder.append(_name_8, "\t\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("var divObj = $(\"#");
    String _name_9 = graph.getName();
    _builder.append(_name_9, "\t\t\t");
    _builder.append("\").parent()[0];");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("var className = divObj.className;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(className.indexOf(\"large\") > -1){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("className = className.replace(\"large\", \"big\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("className = className.replace(\"big\", \"large\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("divObj.className = className;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("$(\"#");
    String _name_10 = graph.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append("\")[0].innerHTML =\'\';");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("paint");
    String _name_11 = graph.getName();
    _builder.append(_name_11, "\t\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("paint");
    String _name_12 = graph.getName();
    _builder.append(_name_12, "\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("</script>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Tile graph, final CharSequence colorClass) {
    if (graph instanceof Graph) {
      return _compile((Graph)graph, colorClass);
    } else if (graph instanceof Link) {
      return _compile((Link)graph, colorClass);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(graph, colorClass).toString());
    }
  }
}
