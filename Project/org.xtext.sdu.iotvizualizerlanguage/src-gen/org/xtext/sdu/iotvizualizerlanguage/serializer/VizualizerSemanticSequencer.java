/*
 * generated by Xtext 2.9.2
 */
package org.xtext.sdu.iotvizualizerlanguage.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.sdu.formularzlanguage.formular.Expression;
import org.xtext.sdu.formularzlanguage.formular.Factor;
import org.xtext.sdu.formularzlanguage.formular.Formula;
import org.xtext.sdu.formularzlanguage.formular.FormularPackage;
import org.xtext.sdu.formularzlanguage.formular.Variable;
import org.xtext.sdu.formularzlanguage.serializer.FormularSemanticSequencer;
import org.xtext.sdu.iotvizualizerlanguage.services.VizualizerGrammarAccess;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Datasource;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.DimensionalData;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Graph;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Link;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Page;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.SchemaParser;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Selector;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.URI;
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.VizualizerPackage;

@SuppressWarnings("all")
public class VizualizerSemanticSequencer extends FormularSemanticSequencer {

	@Inject
	private VizualizerGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FormularPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FormularPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case FormularPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case FormularPackage.FORMULA:
				sequence_Formula(context, (Formula) semanticObject); 
				return; 
			case FormularPackage.NUMBER:
				sequence_Number(context, (org.xtext.sdu.formularzlanguage.formular.Number) semanticObject); 
				return; 
			case FormularPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		else if (epackage == VizualizerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VizualizerPackage.DATASOURCE:
				sequence_Datasource(context, (Datasource) semanticObject); 
				return; 
			case VizualizerPackage.DIMENSIONAL_DATA:
				sequence_DimensionalData(context, (DimensionalData) semanticObject); 
				return; 
			case VizualizerPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case VizualizerPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case VizualizerPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case VizualizerPackage.SCHEMA_PARSER:
				sequence_SchemaParser(context, (SchemaParser) semanticObject); 
				return; 
			case VizualizerPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case VizualizerPackage.SYSTEM:
				sequence_System(context, (org.xtext.sdu.iotvizualizerlanguage.vizualizer.System) semanticObject); 
				return; 
			case VizualizerPackage.URI:
				sequence_URI(context, (URI) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Datasource returns Datasource
	 *     Source returns Datasource
	 *
	 * Constraint:
	 *     (name=ID source=[Source|ID] dimensions+=DimensionalData+)
	 */
	protected void sequence_Datasource(ISerializationContext context, Datasource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DimensionalData returns DimensionalData
	 *
	 * Constraint:
	 *     (dim+=ID formula+=Formula)
	 */
	protected void sequence_DimensionalData(ISerializationContext context, DimensionalData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tile returns Graph
	 *     Graph returns Graph
	 *
	 * Constraint:
	 *     (name=ID source=[Datasource|ID])
	 */
	protected void sequence_Graph(ISerializationContext context, Graph semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.TILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.TILE__NAME));
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.GRAPH__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.GRAPH__SOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGraphAccess().getSourceDatasourceIDTerminalRuleCall_2_0_1(), semanticObject.getSource());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tile returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID page=[Page|ID])
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.TILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.TILE__NAME));
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.LINK__PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.LINK__PAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLinkAccess().getPagePageIDTerminalRuleCall_3_0_1(), semanticObject.getPage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (name=ID tiles+=Tile*)
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SchemaParser returns SchemaParser
	 *
	 * Constraint:
	 *     (name=ID schemaType=SchemaType selectors+=Selector+)
	 */
	protected void sequence_SchemaParser(ISerializationContext context, SchemaParser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (varname=ID steps+=STRING steps+=STRING+)
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (pages+=Page | sources+=Source | schemas+=SchemaParser)+
	 */
	protected void sequence_System(ISerializationContext context, org.xtext.sdu.iotvizualizerlanguage.vizualizer.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Source returns URI
	 *     URI returns URI
	 *
	 * Constraint:
	 *     (name=ID uri=STRING parser=[SchemaParser|ID])
	 */
	protected void sequence_URI(ISerializationContext context, URI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.SOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.SOURCE__NAME));
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.URI__URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.URI__URI));
			if (transientValues.isValueTransient(semanticObject, VizualizerPackage.Literals.URI__PARSER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizualizerPackage.Literals.URI__PARSER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURIAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getURIAccess().getUriSTRINGTerminalRuleCall_4_0(), semanticObject.getUri());
		feeder.accept(grammarAccess.getURIAccess().getParserSchemaParserIDTerminalRuleCall_6_0_1(), semanticObject.getParser());
		feeder.finish();
	}
	
	
}
