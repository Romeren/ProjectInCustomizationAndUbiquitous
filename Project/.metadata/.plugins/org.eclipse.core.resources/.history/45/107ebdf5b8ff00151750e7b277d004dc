/*
 * generated by Xtext 2.9.2
 */
package org.xtext.sdu.iotvizualizerlanguage.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Page
import javax.inject.Inject
import java.util.List
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Link
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Graph
import org.xtext.sdu.iotvizualizerlanguage.vizualizer.Tile

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VizualizerGenerator extends AbstractGenerator {

	@Inject Precompile precompile
	@Inject Postcompile postcompile

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		precompile.precompile(resource, fsa);
		
		var List<String> pageNames = newArrayList
		
		for(p: resource.allContents.toIterable.filter(Page)) {
			pageNames.add(p.name)
			
			//generate HTML template:
			fsa.generateFile(
				"templates\\" + p.name + ".html",
				p.compileTemplateHTML
			)
			
    	}
    	
    	postcompile.postcompile(fsa, pageNames)
	}
	
	
	def compileTemplateHTML(Page p)
	'''
	{% extends 'base.html' %}
	{% block content %}
	<div class="tile-area fg-white tile-area-scheme-dark">
		<h1 class="tile-area-title">«p.name»</h1>
		<div class="tile-area-controls">
		</div>
		<div class="tile-group double">
			<span class="tile-group-title">General</span>
			<div class="tile-container">
				«FOR t:p.getTiles()»
					«t.compile»			
				«ENDFOR»
			</div>
		</div>
		<div class="tile-group double">
			<span class="tile-group-title">Links</span>
			<div class="tile-container">
				«FOR l:p.getTiles()»
					«IF l instanceof Link»
						«l.compile»
					«ENDIF»
				«ENDFOR»
			</div
		</div>
	</div>
	{% endblock %}
	'''
	
	
	def compile(Tile tile)
	'''
	«IF tile instanceof Link»
		«(tile as Link).compile»
	«ELSEIF tile instanceof Graph»
		«(tile as Graph).compile»
	«ENDIF»
	'''
	
	def compile(Link link)
	'''
	<div class="tile-small bg-blue fg-white" onclick="document.location.href='/«link.page.name»/'">
		<div class="tile-content">
			<span>«link.name»<span>
		</div>
	</div>
	'''
	
	def compile(Graph graph)
	'''
	<div class="tile-large bg-steel fg-white">
		<div class="tile-content">
		</div>
		<span class="tile-label">«graph.name»<span>
	</div>
	'''
}
