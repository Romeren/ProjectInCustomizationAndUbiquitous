package org.xtext.sdu.iotvizualizerlanguage.generator

import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.emf.ecore.resource.Resource

class Precompile {
	def precompile(Resource resource, IFileSystemAccess2 fsa) {
		fsa.generateFile("manage.py", compileManager)
		fsa.generateFile("webserver\\settings.py", compileSettings)
		fsa.generateFile("webserver\\__init__.py", compileInit)
		fsa.generateFile("webserver\\wsgi.py", compileWsgi)
		fsa.generateFile("webserver\\urls.py", compileUrls)
		fsa.generateFile("templates\\base.html", compileBaseHtml);
		fsa.generateFile("templates\\navigationbar.html",compileNavigationBar);
	}
	
	def compileManager()
	'''
	#!/usr/bin/env python
	import os
	import sys
	
	if __name__ == "__main__":
	    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "webserver.settings")
	
	    from django.core.management import execute_from_command_line
	
	    execute_from_command_line(sys.argv)
	'''
	
	def compileSettings()
	'''
	"""
	Django settings for webserver project.
	
	Generated by 'django-admin startproject' using Django 1.9.4.
	
	For more information on this file, see
	https://docs.djangoproject.com/en/1.9/topics/settings/
	
	For the full list of settings and their values, see
	https://docs.djangoproject.com/en/1.9/ref/settings/
	"""
	
	import os
	
	# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
	BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
	
	
	# Quick-start development settings - unsuitable for production
	# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/
	
	# SECURITY WARNING: keep the secret key used in production secret!
	SECRET_KEY = 'o_a&t5askcjj66@%ru2s%wjic2_xcy)n&78=tt@hl%3#)!6usk'
	
	# SECURITY WARNING: don't run with debug turned on in production!
	DEBUG = True
	
	ALLOWED_HOSTS = []
	
	
	# Application definition
	
	INSTALLED_APPS = [
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	]
	
	MIDDLEWARE_CLASSES = [
	    'django.middleware.security.SecurityMiddleware',
	    'django.contrib.sessions.middleware.SessionMiddleware',
	    'django.middleware.common.CommonMiddleware',
	    'django.middleware.csrf.CsrfViewMiddleware',
	    'django.contrib.auth.middleware.AuthenticationMiddleware',
	    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
	    'django.contrib.messages.middleware.MessageMiddleware',
	    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	]
	
	ROOT_URLCONF = 'webserver.urls'
	
	TEMPLATES = [
	    {
	        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	        'DIRS': ['templates/'],
	        'APP_DIRS': True,
	        'OPTIONS': {
	            'context_processors': [
	                'django.template.context_processors.debug',
	                'django.template.context_processors.request',
	                'django.contrib.auth.context_processors.auth',
	                'django.contrib.messages.context_processors.messages',
	            ],
	        },
	    },
	]
	
	WSGI_APPLICATION = 'webserver.wsgi.application'
	
	
	# Database
	# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
	
	DATABASES = {
	    'default': {
	        'ENGINE': 'django.db.backends.sqlite3',
	        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	    }
	}
	
	
	# Password validation
	# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators
	
	AUTH_PASSWORD_VALIDATORS = [
	    {
	        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	    },
	    {
	        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	    },
	]
	
	
	# Internationalization
	# https://docs.djangoproject.com/en/1.9/topics/i18n/
	
	LANGUAGE_CODE = 'en-us'
	
	TIME_ZONE = 'UTC'
	
	USE_I18N = True
	
	USE_L10N = True
	
	USE_TZ = True
	
	
	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/1.9/howto/static-files/
	
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')
	'''
	
	def compileInit()
	''''''
	
	def compileWsgi()
	'''
	"""
	WSGI config for webserver project.
	
	It exposes the WSGI callable as a module-level variable named ``application``.
	
	For more information on this file, see
	https://docs.djangoproject.com/en/1.9/howto/deployment/wsgi/
	"""
	
	import os
	
	from django.core.wsgi import get_wsgi_application
	
	os.environ.setdefault("DJANGO_SETTINGS_MODULE", "webserver.settings")
	
	application = get_wsgi_application()
	'''
	
	def compileUrls()
	'''
	"""example URL Configuration
	
	The `urlpatterns` list routes URLs to views. For more information please see:
	    https://docs.djangoproject.com/en/1.9/topics/http/urls/
	Examples:
	Function views
	    1. Add an import:  from my_app import views
	    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
	Class-based views
	    1. Add an import:  from other_app.views import Home
	    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
	Including another URLconf
	    1. Import the include() function: from django.conf.urls import url, include
	    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
	"""
	from django.conf.urls import include, url
	from django.contrib import admin
	
	urlpatterns = [
	    url(r'^', include('pages.urls')),
	    url(r'^admin/', admin.site.urls),
	]
	'''
	
	def compileBaseHtml()
	'''
	<!DOCTYPE html>
	<html>
	<head>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
		<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
		<link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro.min.css">
		<link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro-responsive.min.css">
		<link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro-schemes.min.css">
		<link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro-rtl.min.css">
		<link rel="stylesheet" type="text/css" href="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/css/metro-icons.min.css">
		<script src="https://cdn.rawgit.com/olton/Metro-UI-CSS/master/build/js/metro.min.js"></script>
		<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
		{% load static %}
		<link rel="stylesheet" href="{% static 'css/style.css' %}">
		<script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
		<title>Informatics</title>
	</head>
	<body>
	{% include "navigationbar.html"%}
	{% block content %}
	{% endblock %}
	</body>
	</html>
	'''
	
	def compileNavigationBar()
	'''
	{% block content %}
	<nav class="navbar navbar-default">
	  <div class="container-fluid">
	    <!-- Brand and toggle get grouped for better mobile display -->
	    <div class="navbar-header">
	      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
	        <span class="sr-only">Toggle navigation</span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	      </button>
	      <a class="navbar-brand" href="#">Informatics</a>
	    </div>
	
	    <!-- Collect the nav links, forms, and other content for toggling -->
	    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
	      <ul class="nav navbar-nav">
	        <li class="active"><a href="#">Link <span class="sr-only">(current)</span></a></li>
	        <li><a href="#">Link</a></li>
	        <li class="dropdown">
	          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
	          <ul class="dropdown-menu">
	            <li><a href="#">Action</a></li>
	            <li><a href="#">Another action</a></li>
	            <li><a href="#">Something else here</a></li>
	            <li role="separator" class="divider"></li>
	            <li><a href="#">Separated link</a></li>
	            <li role="separator" class="divider"></li>
	            <li><a href="#">One more separated link</a></li>
	          </ul>
	        </li>
	      </ul>
	      <form class="navbar-form navbar-left" role="search">
	        <div class="form-group">
	          <input type="text" class="form-control" placeholder="Search">
	        </div>
	        <button type="submit" class="btn btn-default">Submit</button>
	      </form>
	      <ul class="nav navbar-nav navbar-right">
	        <li><a href="#">Link</a></li>
	        <li class="dropdown">
	          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
	          <ul class="dropdown-menu">
	            <li><a href="#">Action</a></li>
	            <li><a href="#">Another action</a></li>
	            <li><a href="#">Something else here</a></li>
	            <li role="separator" class="divider"></li>
	            <li><a href="#">Separated link</a></li>
	          </ul>
	        </li>
	      </ul>
	    </div><!-- /.navbar-collapse -->
	  </div><!-- /.container-fluid -->
	</nav>
	
	{% endblock %}
	'''
}