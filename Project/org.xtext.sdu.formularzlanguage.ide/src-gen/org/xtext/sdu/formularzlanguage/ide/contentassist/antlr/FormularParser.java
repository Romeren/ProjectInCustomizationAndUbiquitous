/*
 * generated by Xtext 2.9.2
 */
package org.xtext.sdu.formularzlanguage.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.sdu.formularzlanguage.ide.contentassist.antlr.internal.InternalFormularParser;
import org.xtext.sdu.formularzlanguage.services.FormularGrammarAccess;

public class FormularParser extends AbstractContentAssistParser {

	@Inject
	private FormularGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalFormularParser createParser() {
		InternalFormularParser result = new InternalFormularParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOp1Access().getAlternatives(), "rule__Op1__Alternatives");
					put(grammarAccess.getOp2Access().getAlternatives(), "rule__Op2__Alternatives");
					put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
					put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
					put(grammarAccess.getPrimitiveAccess().getGroup_2(), "rule__Primitive__Group_2__0");
					put(grammarAccess.getFormulaAccess().getGroup(), "rule__Formula__Group__0");
					put(grammarAccess.getFormulaAccess().getGroup_2(), "rule__Formula__Group_2__0");
					put(grammarAccess.getFormulaAccess().getGroup_2_1(), "rule__Formula__Group_2_1__0");
					put(grammarAccess.getMathAccess().getFormularsAssignment(), "rule__Math__FormularsAssignment");
					put(grammarAccess.getExpressionAccess().getLeftAssignment_0(), "rule__Expression__LeftAssignment_0");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_0(), "rule__Expression__OpAssignment_1_0");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_1(), "rule__Expression__RightAssignment_1_1");
					put(grammarAccess.getFactorAccess().getLeftAssignment_0(), "rule__Factor__LeftAssignment_0");
					put(grammarAccess.getFactorAccess().getOpAssignment_1_0(), "rule__Factor__OpAssignment_1_0");
					put(grammarAccess.getFactorAccess().getRightAssignment_1_1(), "rule__Factor__RightAssignment_1_1");
					put(grammarAccess.getNumberAccess().getValAssignment(), "rule__Number__ValAssignment");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getFormulaAccess().getNameAssignment_0(), "rule__Formula__NameAssignment_0");
					put(grammarAccess.getFormulaAccess().getVarsAssignment_2_0(), "rule__Formula__VarsAssignment_2_0");
					put(grammarAccess.getFormulaAccess().getVarsAssignment_2_1_1(), "rule__Formula__VarsAssignment_2_1_1");
					put(grammarAccess.getFormulaAccess().getExpAssignment_5(), "rule__Formula__ExpAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalFormularParser typedParser = (InternalFormularParser) parser;
			typedParser.entryRuleMath();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FormularGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FormularGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
